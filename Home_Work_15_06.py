# # Функция для обмена значениями двух переменных
# def swap(x, y):
#     x, y = y, x  # Обмен значений с помощью множественного присваивания
#     return x, y
#
# # Пример использования
# a, b = 5, 10
# c, d = 20, 30
#
# print("До обмена:")
# print(f"a = {a}, b = {b}")
# print(f"c = {c}, d = {d}")
#
# # Выполняем обмен значениями
# a, b = swap(a, b)
# c, d = swap(c, d)
#
# print("\nПосле обмена:")
# print(f"a = {a}, b = {b}")
# print(f"c = {c}, d = {d}")

########################################

# import math
#
# # Функция для расчета периметра треугольника
# def calculate_perimeter(a, b, c):
#     return a + b + c
#
# # Функция для расчета площади треугольника по формуле Герона
# def calculate_area(a, b, c):
#     # Полупериметр
#     s = (a + b + c) / 2
#     # Площадь по формуле Герона
#     area = math.sqrt(s * (s - a) * (s - b) * (s - c))
#     return area
#
# # Ввод данных для первого треугольника
# a1, b1, c1 = map(float, input("Введите стороны первого треугольника (через пробел): ").split())
#
# # Ввод данных для второго треугольника
# a2, b2, c2 = map(float, input("Введите стороны второго треугольника (через пробел): ").split())
#
# # Проверка существования треугольников
# def is_triangle(a, b, c):
#     return a + b > c and a + c > b and b + c > a
#
# if not is_triangle(a1, b1, c1) or not is_triangle(a2, b2, c2):
#     print("Один или оба треугольника с такими сторонами не существуют.")
# else:
#     # Расчет периметров
#     perimeter1 = calculate_perimeter(a1, b1, c1)
#     perimeter2 = calculate_perimeter(a2, b2, c2)
#     total_perimeter = perimeter1 + perimeter2
#
#     # Расчет площадей
#     area1 = calculate_area(a1, b1, c1)
#     area2 = calculate_area(a2, b2, c2)
#     total_area = area1 + area2
#
#     # Вывод результатов
#     print("\nРезультаты:")
#     print(f"Периметр первого треугольника: {perimeter1:.2f}")
#     print(f"Периметр второго треугольника: {perimeter2:.2f}")
#     print(f"Сумма периметров: {total_perimeter:.2f}")
#     print(f"Площадь первого треугольника: {area1:.2f}")
#     print(f"Площадь второго треугольника: {area2:.2f}")
#     print(f"Сумма площадей: {total_area:.2f}")

    ##################################################

# # Логическая функция для проверки, находится ли точка внутри прямоугольника
# def pointInRect(x, y, x1, y1, x2, y2):
#     """
#     Проверяет, находится ли точка (x, y) внутри прямоугольника.
#
#     Аргументы:
#     - x, y: координаты точки
#     - x1, y1: координаты верхнего левого угла прямоугольника
#     - x2, y2: координаты правого нижнего угла прямоугольника
#
#     Возвращает:
#     - True, если точка внутри прямоугольника
#     - False, если точка снаружи или на границе
#     """
#     return x1 < x < x2 and y1 > y > y2
#
#
# # Пример использования с вводом данных от пользователя
# try:
#     # Ввод координат прямоугольника
#     print("Введите координаты верхнего левого угла прямоугольника (x1, y1):")
#     x1 = float(input("x1 = "))
#     y1 = float(input("y1 = "))
#
#     print("Введите координаты правого нижнего угла прямоугольника (x2, y2):")
#     x2 = float(input("x2 = "))
#     y2 = float(input("y2 = "))
#
#     # Ввод координат точки
#     print("Введите координаты точки (x, y):")
#     x = float(input("x = "))
#     y = float(input("y = "))
#
#     # Проверка
#     if pointInRect(x, y, x1, y1, x2, y2):
#         print(f"Точка ({x}, {y}) находится внутри прямоугольника.")
#     else:
#         print(f"Точка ({x}, {y}) находится снаружи прямоугольника.")
#
# except ValueError:
#     print("Ошибка: введены некорректные данные. Пожалуйста, вводите числа.")

    #########################################################################


# # Функция для вычисления площади треугольника по координатам его вершин
# def triangle_area(x1, y1, x2, y2, x3, y3):
#     """
#     Вычисляет площадь треугольника по координатам его вершин.
#
#     Аргументы:
#     - x1, y1: координаты первой вершины
#     - x2, y2: координаты второй вершины
#     - x3, y3: координаты третьей вершины
#
#     Возвращает:
#     - Площадь треугольника
#     """
#     return abs((x2 - x1) * (y3 - y1) - (x3 - x1) * (y2 - y1)) / 2
#
#
# # Логическая функция для проверки, находится ли точка внутри треугольника
# def pointInTriangle(px, py, x1, y1, x2, y2, x3, y3):
#     """
#     Проверяет, находится ли точка (px, py) внутри треугольника с вершинами (x1, y1), (x2, y2), (x3, y3).
#
#     Аргументы:
#     - px, py: координаты точки
#     - x1, y1: координаты первой вершины треугольника
#     - x2, y2: координаты второй вершины треугольника
#     - x3, y3: координаты третьей вершины треугольника
#
#     Возвращает:
#     - True, если точка внутри треугольника
#     - False, если точка снаружи или на границе
#     """
#     # Площадь основного треугольника
#     main_area = triangle_area(x1, y1, x2, y2, x3, y3)
#
#     # Площади подтреугольников
#     area1 = triangle_area(px, py, x1, y1, x2, y2)
#     area2 = triangle_area(px, py, x2, y2, x3, y3)
#     area3 = triangle_area(px, py, x3, y3, x1, y1)
#
#     # Сумма площадей подтреугольников
#     total_area = area1 + area2 + area3
#
#     # Проверяем, равна ли сумма площадей подтреугольников площади основного треугольника
#     # Допускаем небольшую погрешность из-за особенностей вычислений с плавающей точкой
#     return abs(total_area - main_area) < 1e-6
#
#
# # Пример использования с вводом данных от пользователя
# try:
#     # Ввод координат вершин треугольника
#     print("Введите координаты вершин треугольника:")
#     x1 = float(input("x1 = "))
#     y1 = float(input("y1 = "))
#     x2 = float(input("x2 = "))
#     y2 = float(input("y2 = "))
#     x3 = float(input("x3 = "))
#     y3 = float(input("y3 = "))
#
#     # Ввод координат точки
#     print("Введите координаты точки:")
#     px = float(input("px = "))
#     py = float(input("py = "))
#
#     # Проверка
#     if pointInTriangle(px, py, x1, y1, x2, y2, x3, y3):
#         print(f"Точка ({px}, {py}) находится внутри треугольника.")
#     else:
#         print(f"Точка ({px}, {py}) находится снаружи треугольника.")
#
# except ValueError:
#     print("Ошибка: введены некорректные данные. Пожалуйста, вводите числа.")

    ####################################################################3

# Функция для вычисления итоговой оценки спортсмена
def calculate_final_score(scores):
    """
    Принимает список из пяти оценок и возвращает итоговую оценку спортсмена.

    Аргументы:
    - scores: список из пяти целых чисел (оценки экспертов)

    Возвращает:
    - Итоговую оценку (среднее арифметическое трех оценок после отбрасывания максимума и минимума)
    """
    # Проверяем, что передано ровно 5 оценок
    if len(scores) != 5:
        raise ValueError("Требуется ровно 5 оценок.")

    # Находим максимальную и минимальную оценки
    max_score = max(scores)
    min_score = min(scores)

    # Удаляем максимальную и минимальную оценки
    scores.remove(max_score)
    scores.remove(min_score)

    # Вычисляем среднее арифметическое оставшихся трех оценок
    final_score = sum(scores) / len(scores)

    return final_score


# Пример использования с вводом данных от пользователя
try:
    # Ввод оценок
    print("Введите пять оценок экспертов (целые числа от 0 до 100):")
    scores = [int(input(f"Оценка {i + 1}: ")) for i in range(5)]

    # Проверка корректности ввода
    if any(score < 0 or score > 100 for score in scores):
        raise ValueError("Оценки должны быть целыми числами от 0 до 100.")

    # Вычисление итоговой оценки
    final_score = calculate_final_score(scores)

    # Вывод результата
    print(f"Итоговая оценка спортсмена: {final_score:.2f}")

except ValueError as e:
    print(f"Ошибка: {e}")